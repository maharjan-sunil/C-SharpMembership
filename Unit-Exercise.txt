using Membership.Implementation.Interface;
using Membership.Models;
using System;
using System.Collections.Generic;

namespace Membership.Implementation.Service
{
    public class OrderService : IOrder
    {
        public List<Order> GetList()
        {
            return new List<Order>
            {
                new Order
                {
                    Id=2,
                    Status = true,
                    ReferenceId = "10"
                },
                new Order
                {
                    Id=3,
                    Status = true,
                    ReferenceId = "100"
                }
            };
        }

    }
}

using Membership.Implementation.DataManager;
using Membership.Models;
using System.Web.Mvc;

namespace Membership.Controllers
{
    public class OrderController : Controller
    {
        public string OverLappingOrderExist(Order order)
        {
            //Order order = new Order
            //{
            //    Id = 1,
            //    Status = true,
            //    ReferenceId = "100"
            //};
            var overLappingReferenceId = new OrderDataManager().GetOverLappingOrder(order);
            return overLappingReferenceId;
        }
    }
}

using Membership.Models;
using System.Collections.Generic;

namespace Membership.Implementation.Interface
{
    public interface IOrder
    {
        //interface cannot contain instance field
        //int total = 0;

        //by default all method defined in interface are abtract
        //which means cannot have non-abstract method
        //    decimal TotalPrice();

        //cannot have variable except fot that can have field
        //All fields in interface are public static final, i.e. they are constants.
        //  int OrderId { get; set; }

        List<Order> GetList();
    }
}

using Membership.Implementation.Interface;
using Membership.Implementation.Service;
using Membership.Models;
using System.Linq;

namespace Membership.Implementation.DataManager
{
    public class OrderDataManager
    {
        private readonly IOrder _order;
        public OrderDataManager(IOrder order = null)
        {
            _order = order ?? new OrderService();
        }

        public string GetOverLappingOrder(Order order)
        {
            if (!order.Status)
                return "No Data";

            var list = _order.GetList();
            var overLappingOrder = list.Where(l => l.Id != order.Id && l.Status);
            if (overLappingOrder == null)
                return string.Empty;

            return overLappingOrder.FirstOrDefault().ReferenceId;
        }

    }
}


using Membership.Implementation.DataManager;
using Membership.Implementation.Interface;
using Membership.Models;
using Moq;
using NUnit.Framework;
using System.Collections.Generic;

namespace MembershipTest
{
    [TestFixture]
    public class OrderTests
    {
        private OrderDataManager dataManager;
        private Mock<IOrder> orderMock;
        [SetUp]
        public void Setup()
        {
            orderMock = new Mock<IOrder>();
            dataManager = new OrderDataManager(orderMock.Object);

        }
        [Test]
        public void OverLappingOrderExist_WhenCalledWithStatusFalse_ReturnEmptyString()
        {
            orderMock.Setup(x => x.GetList()).Returns(new List<Order>
            {
                 new Order
                {
                    Id=2,
                    Status = true,
                    ReferenceId = "10"
                },
                new Order
                {
                    Id=3,
                    Status = true,
                    ReferenceId = "100"
                }
            });

            var result = dataManager.GetOverLappingOrder(new Order
            {
                Status = false
            });
            Assert.That(result, Is.Empty);
        }
    }
}
